Xmobar - A Minimalistic Text Based Status Bar

ABOUT
=====

Xmobar is a minimalistic, text based, status bar.

It was inspired by the Ion3 status bar, and supports similar features,
like dynamic color management, output templates, and extensibility
through plugins.

See xmobar.config-sample for a sample configuration.

Try it with:
xmobar xmobar.config-sample

DOWNLOAD
========

You can get the Xmobar source code from Hackage:
http://hackage.haskell.org/cgi-bin/hackage-scripts/package/xmobar

To get the darcs source run:
darcs get http://gorgias.mine.nu/repos/xmobar/

The latest binary can be found here:
http://gorgias.mine.nu/xmobar/xmobar-0.7.bin

A recent screen shot can be found here:
http://gorgias.mine.nu/xmobar/xmobar-0.7.png

INSTALLATION
============

tar xvfz xmobar-0.7
cd xmobar-0.7
runhaskell Setup.lhs configure --prefix=/usr/local
runhaskell Setup.lhs build
runhaskell Setup.lhs haddock (optional for building the code documentation)
runhaskell Setup.lhs install (possibly to be run as root)

Run with:
xmobar /path/to/config &
or
xmobar &
if you have the default configuration file saved as:
~/.xmobarrc

CONFIGURATION
=============

Quick Start
-----------

See xmobar.config-sample for an example.

For the output template:

- %command% will execute command and print the output. The output may
  contain markups to change the characters' color.

- <fc=#FF0000>string</fc> will print "string" with #FF0000 color (red).

Other configuration options:

font: Name of the font to be used
bgColor: Backgroud color
fgColor: Default font color
xPos: x position (origin in the upper left corner) of the Xmobar window 
yPos: y position
width: width of the Xmobar window 
height: height
align: text alignment 
refresh: Refresh rate in tenth of seconds
commands: For setting the options of the programs to run (optional)
sepChar: The character to be used for indicating commands in the
         output template (default '%')
template: The output template 

Command Line Options
--------------------

Xmobar can be either configure with a configuration file or with
command line options. In the second case, the command line options
will overwrite any options set in the configuration file.

This is the list of command line options (the output of 
xmobar --help):

Usage: xmobar [OPTION...] [FILE]
Options:
  -h, -?        --help               This help
  -V            --version            Show version information
  -f font name  --font=font name     The font name
  -B bg color   --bgcolor=bg color   The background color. Default black
  -F fg color   --fgcolor=fg color   The foreground color. Default grey
  -x x pos      --xpos=x pos         The x position. Default 0
  -y y pos      --ypos=y pos         The y position. Default 0
  -W width      --width=width        The status bar width. Default 1024
  -H height     --height=height      The status bar height. Default 15
  -a align      --align=align        The text alignment: center, left or right.
                                     Default: left
  -r rate       --refresh=rate       The refresh rate in tenth of seconds:
                                     default 1 sec.
  -s char       --sepchar=char       The character used to separate commands in
                                     the output template. Default '%'
  -t tempate    --template=tempate   The output template
  -c commands   --commands=commands  The list of commands to be executed
Mail bug reports and suggestions to <andrea.rossato@unibz.it>

The Output Template
-------------------

The output template must contain at least one command. Xmobar will
parse the template and will search for the command to be executed in
the "commands" configuration option. First an "alias" will be search
(internal commands such as Weather or Network have default aliasing,
see below). After that the command name will be tried. If a command is
found, the arguments specified in the "commands" list will be used. 

If no command is found in the "commands" list, Xmobar will try to
execute a program with the name found in the template. If the
execution is not successful an error will be reported.
   
The "commands" Configuration Option
-----------------------------------

The "commands" configuration option is a list of commands' information
and arguments to be used by Xmobar when parsing the output template.
Each member of the list consists in a command prefixed by the "Run"
keyword. Each command has arguments to control the way Xmobar is going
to execute it.

This only internal available command is Com (see below Executing
External Commands).

By default Xmobar comes with a plugin consisting in a set of system
monitors. This plugins installs the following internal command:
Weather, Network, Memory, Swap, Cpu, Battery.

To remove them see below Installing/Removing a Plugin

Other commands can be created as plugins with the Plugin
infrastructure. See below Writing a Plugin

This is an example of a command in the "commands" list:
Run Memory ["-t","Mem: <usedratio>%"] 10

Internal Commands and Aliases
-----------------------------

Each command in the "commands" configuration option list has an alias
to be used in the template.

Internal commands have default aliases:

Weather StationID Args RefreshRate
- aliases to the Station ID: so Weather "LIPB" [] can be used in template as %LIBP%
- Args: the argument list (see below)
- Variables that can be used with the "-t"/"--template" argument: 
	    "station", "stationState", "year", "month", "day", "hour",
	    "wind", "visibility", "skyCondition", "tempC", "tempF",
	    "dewPoint", "rh", "pressure"
- Default template: "<station>: <tempC>C, rh <rh>% (<hour>)"

Network Interface Args RefreshRate
- aliases to the interface name: so Network "eth0" [] can be used as %eth0%
- Args: the argument list (see below)
- Variables that can be used with the "-t"/"--template" argument: 
	    "dev", "rx", "tx"
- Default template: "<dev>: <rx>|<tx>"

Memory Args RefreshRate
- aliases to "memory"
- Args: the argument list (see below)
- Variables that can be used with the "-t"/"--template" argument: 
	    "total", "free", "buffer", "cache", "rest", "used", "usedratio"
- Default template: "Mem: <usedratio>% (<cache>M)"

Swap Args RefreshRate
- aliases to "swap"
- Args: the argument list (see below)
- Variables that can be used with the "-t"/"--template" argument: 
	    "total", "used", "free", "usedratio"
- Default template: "Swap: <usedratio>%"

Cpu Args RefreshRate
- aliases to "cpu"
- Args: the argument list (see below)
- Variables that can be used with the "-t"/"--template" argument: 
	    "total", "user", "nice", "system", "idle"
- Default template: "Cpu: <total>"

Battery Args RefreshRate
- aliases to "battery"
- Args: the argument list (see below)
- Variables that can be used with the "-t"/"--template" argument: 
	    "left"
- Default template: "Batt: <left>"

Internal Commands Arguments
---------------------------

These are the arguments that can be used for internal commands in the
"commands" configuration option:

-H number           --High=number               The high threshold
-L number           --Low=number                The low threshold
-h color number     --high=color number         Color for the high threshold: es "#FF0000"
-n color number     --normal=color number       Color for the normal threshold: es "#00FF00"
-l color number     --low=color number          Color for the low threshold: es "#0000FF"
-t output template  --template=output template  Output template of the command.

Commands' arguments must be set as a list. Es:
Run Weather "EGPF" ["-t","<station>: <tempC>C"] 36000

In this case Xmobar will run the weather monitor, getting information
for the weather station ID EGPF (Glasgow Airport, as a homage to GHC)
every hour (36000 tenth of seconds), with a template that will output
something like:
"Glasgow Airport: 16.0C"

Executing External Commands
---------------------------

In order to execute an external command you can either write the
command name in the template, in this case it will be executed without
arguments, or you can configure it in the "commands" configuration
option list with the Com template command:

Com ProgarmName Args Alias RefreshRate
- ProgramName: the name of the program
- Args: the arguments to be passed to the program at execution time
- Alias: a name to be used in the template. If the alias is en empty
  string the program name can be used in the template.
Es:
Run Com "uname" ["-s","-r"] "" 36000
can be used in the output template as %uname%

Run Com "date" ["+\"%a %b %_d %H:%M\""] "mydate" 600
can be used in the output template as %mydate%

PLUGINS
=======

Writing a Plugin
----------------

Writing a plugin for Xmobar should be very simple. You need to create
a data type with at least one constructor.

Next you must declare this data type an instance of the Exec class, by
defining the 3 needed methods:

    run :: e -> IO String
    rate :: e -> Int
    alias :: e -> String

"run" must produce the IO String that will be displayed by Xmobar.
"rate" is the refresh rate for you plugin (the number of tenth of
seconds between two successive runs);
"alias" is the name to be used in the output template.

That requires importing the plugin API (the Exec class definition),
that is exported by Plugins.hs. So you just need to import it in your
module with:

import Plugins

After that your type constructor can be used as an argument for the
Runnable type constructor "Run" in the "commands" list of the
configuration options.

This requires importing you plugin into Config.hs and adding you type
to the type list in the type signature of Config.runnableTypes.

For a vary basic example see Plugins/HelloWorld.hs that is distributed
with Xmobar.

Installing/Removing a Plugin
----------------------------

Installing a plugin should require 3 steps. Here we are going to
install the HelloWorld plugin that comes with Xmobar:

1. import the plugin module in Config.hs, by adding: 
   
import Plugins.HelloWorld

2. add the plugin data type to the list of data types in the type
   signature of "runnableTypes" in Config.hs. For instance, for the
   HelloWorld plugin, change "runnableTypes" into:

runnableTypes :: (Command,(Monitors,(HelloWorld,())))
runnableTypes = undefined

3. Rebuild and reinstall Xmobar. Now test it with:

xmobar Plugins/helloworld.config

As you may see in the example configuration file, the plugin can be
used by adding, in the "commands" list:

Run HelloWorld

and, in the output template, the alias of the plugin:

%helloWorld%

That's it.

To remove a plugin, just remove its type from the type signature of
runnableTypes and remove the imported modules.

To remove the system monitor plugin you need:

1. remove the line
import Plugins.Monitors

2. change
runnableTypes :: (Command,(Monitors,()))
runnableTypes = undefined
to
runnableTypes :: (Command,())
runnableTypes = undefined

3. rebuild.

AUTHOR
======

Andrea Rossato <andrea.rossato@unibz.it>

CREDITS
=======

Thanks to Robert Manea and Spencer Janssen for their help in
understanding how X works. He gave me suggestions on how to solve many
problems with Xmobar.

Thanks to Claus Reinke for make me understand existential types (or at
least for letting me thing I grasp existential types...;-). 

Xmobar incorporates patches from: Krzysztof Kosciuszkiewicz and
Spencer Janssen. 

LINKS
=====

The Xmobar home page:
http://gorgias.mine.nu/repos/xmobar/

Xmobars darcs repository:
http://gorgias.mine.nu/repos/xmobar/

To understand the internal mysteries of Xmobar try reading this:
http://www.haskell.org/haskellwiki/X_window_programming_in_Haskell

